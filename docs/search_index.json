[["ggplot.html", "15 ggplot", " 15 ggplot ggplot is based on a grammar graphics - a way of approaching describing the construction of a graphic from common building blocks. Building a graphic with ggplot then follows some common patterns of construction. At its most basic, we supply ggplot with a dataset and some aesthetics–that is, the variables we wish to display on the plot and how they should appear. Laslty, we define a plot type. Step by step this looks like call ggplot() provide ggplot with a data set provide ggplot with the variables of interest and their aesthetic properties define a plot type with geom_plotType() This is a brief introduction. For more in depth examples and solutions, check out ggplot2: Elegant Graphics for Data Analysis by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. "],["the-basic-graph.html", "15.1 The Basic Graph", " 15.1 The Basic Graph The following assumes you’re using R and RMarkdown. Install the libraries if needed install.packages(&quot;ggplot2&quot;) install.packages(&quot;palmerpenguins&quot;) Load them library(ggplot2) # for graphics library(palmerpenguins) # penguins data set First, make sure we know a bit about our data set head(penguins) ## # A tibble: 6 × 8 ## species island bill_length_mm bill_depth_mm flipper_l…¹ body_…² sex year ## &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;int&gt; ## 1 Adelie Torgersen 39.1 18.7 181 3750 male 2007 ## 2 Adelie Torgersen 39.5 17.4 186 3800 fema… 2007 ## 3 Adelie Torgersen 40.3 18 195 3250 fema… 2007 ## 4 Adelie Torgersen NA NA NA NA &lt;NA&gt; 2007 ## 5 Adelie Torgersen 36.7 19.3 193 3450 fema… 2007 ## 6 Adelie Torgersen 39.3 20.6 190 3650 male 2007 ## # … with abbreviated variable names ¹​flipper_length_mm, ²​body_mass_g Next, we call ggplot, define our data set, and then the variables to plot on the x and y axes: ggplot(data = penguins, aes(x = sex, y = body_mass_g)) This sets us up with a blank grid with x and y axis ticks corresponding to your variable values and x and y axis labels corresponding to your variables. Now we call a plot type to represent our data, in this case, a box plot ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot() ## Warning: Removed 2 rows containing non-finite values (stat_boxplot). We have some NA values in our data set. We won’t worry about cleaning those up here. But we will suppress the error message with a code chunk option. ```{r, warning = FALSE} ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot() ``` Chunk options are independent of ggplot itself and impact the knitting process of your RMarkdown document. For a more detailed overview of the code chunks options available to you, check out Xie Yihuis page on Knitr chunk options. "],["labeling-and-captions.html", "15.2 Labeling and captions", " 15.2 Labeling and captions Labels default to our variable names, which may not be what we want on our graph. We can override this with labs(). ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot() + labs( x = &quot;Sex&quot;, y = &quot;Body Mass (grams)&quot; ) Captions are also important. There are two ways that we can add this information. The first uses labs(): ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot() + labs( x = &quot;Sex&quot;, y = &quot;Body Mass (grams)&quot;, caption = &quot;Palmer Penguins. Body mass grouped by sex. n = 344.&quot; ) The second is better if we’re using RMarkdown. Note also that we can include markdown syntax, italicizing the n. ```{r, fig.cap = &quot;Palmer Penguins. Body mass grouped by sex. *n* = 344.&quot;} ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot(na.rm = TRUE) + labs( x = &quot;Sex&quot;, y = &quot;Body Mass (grams)&quot; ) ``` Figure 15.1: Palmer Penguins. Body mass grouped by sex. n = 344. If you’re knitting your report to html instead of pdf and you want to take advantage of automatic figure numbering–knitting to pdf will take care of automatic figure numbering by default–use the output option bookdown::html_document2 in your YAML. --- title: My Report output: bookdown::html_document2 --- "],["size-shape-colour.html", "15.3 Size, shape &amp; colour", " 15.3 Size, shape &amp; colour Aesthetics such as size, shape, colour, and opacity are powerful ways of visually highlighting aspects of our data. These aesthetics can be mapped to individual variables, which is a great way to increase the number of dimensions–variables–we can plot. They can also be mapped to all data points. When used to map to a variable, we include this within the aes() argument. When used to map to all data points associated with a particular geom, we include this within the geom_plotType() argument. Options include: size colour fill shape alpha Things like bars have both colour (the outside line) and fill (the inside body) properties. Things like lines and points have colour, but not fill. Plotting bill length against bill depth: ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) + geom_point() Adjusting the aesthetics of all data points ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm)) + geom_point(colour = &#39;red&#39;, size = 5, shape = 4) Increasing the number of variables we’re plotting: ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = island, shape = sex)) + geom_point() Adding more dimensions does not always increase the clarity of your graph, as the above example demonstrates! And with some proper labeling: ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = island, shape = sex)) + geom_point() + labs( x = &quot;Sex&quot;, y = &quot;Body Mass (grams)&quot;, colour = &quot;Island&quot;, shape = &quot;Sex&quot; ) "],["more-than-one-geom.html", "15.4 More than one geom", " 15.4 More than one geom It can be handy occasionally to have more than one geom per plot, like including both lines and dots. To do this, we feed our data set and aesthetic mappings into ggplot(), and then call multiple geoms. Using the box plot example from earlier and adding individual data points: ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot() + geom_point() + labs( x = &quot;Sex&quot;, y = &quot;Body Mass (grams)&quot; ) When there are a lot of data points, using ‘jitter’ to create lateral space between points can be useful. ggplot(data = penguins, aes(x = sex, y = body_mass_g)) + geom_boxplot() + geom_jitter(width = 0.25) + labs( x = &quot;Sex&quot;, y = &quot;Body Mass (grams)&quot; ) If you start typing geom_ you’ll see a full list of available plots to you with ggplot. If you’d like more in depth coverage of geoms built into ggplot, see the reference page section on geoms. "],["more-than-one-plot.html", "15.5 More than one plot", " 15.5 More than one plot There are several ways to place more than one plot side by side. One of the easiest is to use patchwork. Install install.packages(&quot;patchwork&quot;) Load library(patchwork) This time we store our plots as variables barGraph &lt;- ggplot(data = penguins, aes(x = sex, fill = island)) + geom_bar() dotPlot &lt;- ggplot(data = penguins, aes(x = sex, y = body_mass_g, colour = species)) + geom_jitter(width = 0.1) Then patchwork will arrange them barGraph + dotPlot barGraph / dotPlot There are many ways in which patchwork can arrange plots. See the chapter Arranging Plots in ggplot2: Elegant Graphics for Data Analysis for more complex examples. "],["faceting-a-plot.html", "15.6 Faceting a Plot", " 15.6 Faceting a Plot We can also facet a plot with a call to facet_grid(). dotPlot + facet_grid(cols = vars(sex)) dotPlot + facet_grid(rows = vars(sex)) dotPlot + facet_grid(cols = vars(sex), rows = vars(island)) A slightly different notation is also valid to express the above graph dotPlot + facet_grid(island ~ sex) See additional facet options on the ggplot facet_grid() reference page. "],["cusomizing-look-and-feel.html", "15.7 Cusomizing Look and Feel", " 15.7 Cusomizing Look and Feel Many visual aspects of your graph can be customized. Most of these are controlled within themes. Themes There are many built in themes, for example, minimal. If you start to type theme_ RStudio will prompt you with a list of built in themes to choose from. dotPlot + theme_minimal() Within a theme, we can start to customize other elements. Things that we can customize included axes elements, legend elements, panel elements, and plot elements. For example, we can build on the theme minimal and remove the panel grids above, we do this with a separate, additional call to theme(): dotPlot + theme_minimal() + theme( panel.grid = element_blank() ) A full list of theme options are available on the ggplot theme reference page. Colours There are several ways of customizing the colours used in our plots, including using a custom colour palette. It’s critical to remember to use appropriate combinations of colour depending on if your data is divergent, continuous, or qualitative in nature. Examples of each of these include: Sequential - for ordered data Diverging - for data with a central location from which other values diverge Qualitative- for categorical data with not natural order Instead of having to generate your own custom colour palettes, a good alternative are the palettes produced by ColourBrewer that already have due consideration to things like contrast, colour blind audiences, benig print friendly etc. Install install.packages(&quot;RColourBrewer&quot;) Load library(RColorBrewer) View the palettes available to us, noting it’s grouped by sequential, qualitative, and diverging palettes. display.brewer.all() Use a palette, by making an additional call to either scale_color_brewer() or scale_fill_brewer() depending on you graph. dotPlot + theme_minimal() + theme( panel.grid = element_blank() ) + scale_color_brewer(palette = &quot;Dark2&quot;) barGraph + theme_minimal() + theme( panel.grid = element_blank() ) + scale_fill_brewer(palette = &quot;Set3&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
